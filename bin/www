#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('your-project-name:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');  
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const socketIo = require('socket.io');
const io = socketIo(server, {
  cors: {
    origin: [
      'http://localhost:3000', // 允許本地開發環境的請求
      'https://sportspass-backend.onrender.com', // 允許生產環境的請求
      'https://node-js-frontend-2024.vercel.app',
      'https://node-js-frontend-2024-8mkc110lv-puffys-projects-b63c5996.vercel.app'
    ],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
  }
});

const instantMsg = io.of('/instantMsg');

instantMsg.on('connection', (socket) => {
  console.log('用户已連接到instantMsg命名空間');

  socket.on('sendMessage', (data) => {
    console.log('收到消息:', data);
    instantMsg.emit('receiveMessage', data); 
  });

  socket.on('disconnect', () => {
    console.log('用户已斷開連接');
  });
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`服務器正運行在端口 ${bind}`);
}
